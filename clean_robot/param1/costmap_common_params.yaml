robot_radius: 0.2 # 如果机器人是圆形，则指定机器人的半径；
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # 如果机器人非圆形，则指定机器人的轮廓；
map_type: costmap # 地图类型

# 障碍物层的参数配置
obstacle_layer:
  enabled: true # 使能障碍物层；
  max_obstacle_height: 0.6 #考虑的最大障碍物高度；
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 2
  unknown_threshold: 15
  mark_threshold: 0
  combination_method: 1
  track_unknown_space: true # true 禁止全局路径规划穿越未知区域；
  obstacle_range: 2.5 # 添加障碍物范围，一方面考虑激光范围，另外范围越大越耗计算资源；
  raytrace_range: 3.0 # 清除障碍物范围；
  publish_voxel_map: false
  observation_sources: scan # 数据源；
  scan: {
      frame_name: base_scan, # Scan的基坐标；
      data_type: LaserScan, # scan数据类型；
      topic: scan, # scan的话题名称；
      inf_is_valid: true, # scan的无穷远数据是否有效；
      marking: true, # 是否根据scan添加障碍物；
      clearing: true, # 是否根据scan清除障碍物；
      min_obstacle_height: 0.0, # scan检测到的最小有效障碍物高度；
      max_obstacle_height: 0.35,
    } # scan检测到的最大有效障碍物高度；
  # for debugging only, let's you see the entire voxel grid

# 全局膨胀层参数配置
global_inflation_layer:
  enabled: true # 是否使能全局膨胀层；
  cost_scaling_factor: 5.0 # 膨胀层的指数衰减速度，值越小衰减越慢(default: 10)；
  inflation_radius: 1.1 # 全局最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。

# 局部膨胀层参数配置
local_inflation_layer:
  enabled: true # 是否使能局部膨胀层；
  cost_scaling_factor: 5.0 # 膨胀层的指数衰减速度，值越小衰减越慢(default: 10)；
  inflation_radius: 0.1 # 局部最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。

# # 静态层参数配置
# static_layer:
#   map_topic: navigation_map # 静态地图话题
#   enabled: true # 是否使用静态层
